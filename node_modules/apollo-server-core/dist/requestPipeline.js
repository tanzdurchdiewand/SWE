"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processGraphQLRequest = exports.APQ_CACHE_PREFIX = exports.InvalidGraphQLRequestError = void 0;
const graphql_1 = require("graphql");
const schemaInstrumentation_1 = require("./utils/schemaInstrumentation");
const apollo_server_errors_1 = require("apollo-server-errors");
const apollo_server_types_1 = require("apollo-server-types");
Object.defineProperty(exports, "InvalidGraphQLRequestError", { enumerable: true, get: function () { return apollo_server_types_1.InvalidGraphQLRequestError; } });
const dispatcher_1 = require("./utils/dispatcher");
const apollo_server_caching_1 = require("apollo-server-caching");
const createSHA_1 = __importDefault(require("./utils/createSHA"));
const runHttpQuery_1 = require("./runHttpQuery");
exports.APQ_CACHE_PREFIX = 'apq:';
function computeQueryHash(query) {
    return createSHA_1.default('sha256')
        .update(query)
        .digest('hex');
}
async function processGraphQLRequest(config, requestContext) {
    const logger = requestContext.logger || console;
    const metrics = requestContext.metrics =
        requestContext.metrics || Object.create(null);
    const dispatcher = initializeRequestListenerDispatcher();
    await initializeDataSources();
    const request = requestContext.request;
    let { query, extensions } = request;
    let queryHash;
    let persistedQueryCache;
    metrics.persistedQueryHit = false;
    metrics.persistedQueryRegister = false;
    if (extensions && extensions.persistedQuery) {
        if (!config.persistedQueries || !config.persistedQueries.cache) {
            return await emitErrorAndThrow(new apollo_server_errors_1.PersistedQueryNotSupportedError());
        }
        else if (extensions.persistedQuery.version !== 1) {
            return await emitErrorAndThrow(new apollo_server_types_1.InvalidGraphQLRequestError('Unsupported persisted query version'));
        }
        persistedQueryCache = config.persistedQueries.cache;
        if (!(persistedQueryCache instanceof apollo_server_caching_1.PrefixingKeyValueCache)) {
            persistedQueryCache = new apollo_server_caching_1.PrefixingKeyValueCache(persistedQueryCache, exports.APQ_CACHE_PREFIX);
        }
        queryHash = extensions.persistedQuery.sha256Hash;
        if (query === undefined) {
            query = await persistedQueryCache.get(queryHash);
            if (query) {
                metrics.persistedQueryHit = true;
            }
            else {
                return await emitErrorAndThrow(new apollo_server_errors_1.PersistedQueryNotFoundError());
            }
        }
        else {
            const computedQueryHash = computeQueryHash(query);
            if (queryHash !== computedQueryHash) {
                return await emitErrorAndThrow(new apollo_server_types_1.InvalidGraphQLRequestError('provided sha does not match query'));
            }
            metrics.persistedQueryRegister = true;
        }
    }
    else if (query) {
        queryHash = computeQueryHash(query);
    }
    else {
        return await emitErrorAndThrow(new apollo_server_types_1.InvalidGraphQLRequestError('Must provide query string.'));
    }
    requestContext.queryHash = queryHash;
    requestContext.source = query;
    await dispatcher.invokeHookAsync('didResolveSource', requestContext);
    try {
        if (config.documentStore) {
            try {
                requestContext.document = await config.documentStore.get(queryHash);
            }
            catch (err) {
                logger.warn('An error occurred while attempting to read from the documentStore. '
                    + (err && err.message) || err);
            }
        }
        if (!requestContext.document) {
            const parsingDidEnd = await dispatcher.invokeDidStartHook('parsingDidStart', requestContext);
            try {
                requestContext.document = parse(query, config.parseOptions);
                parsingDidEnd();
            }
            catch (syntaxError) {
                parsingDidEnd(syntaxError);
                return await sendErrorResponse(syntaxError, apollo_server_errors_1.SyntaxError);
            }
            const validationDidEnd = await dispatcher.invokeDidStartHook('validationDidStart', requestContext);
            const validationErrors = validate(requestContext.document);
            if (validationErrors.length === 0) {
                validationDidEnd();
            }
            else {
                validationDidEnd(validationErrors);
                return await sendErrorResponse(validationErrors, apollo_server_errors_1.ValidationError);
            }
            if (config.documentStore) {
                Promise.resolve(config.documentStore.set(queryHash, requestContext.document)).catch(err => logger.warn('Could not store validated document. ' +
                    (err && err.message) || err));
            }
        }
        const operation = graphql_1.getOperationAST(requestContext.document, request.operationName);
        requestContext.operation = operation || undefined;
        requestContext.operationName =
            (operation && operation.name && operation.name.value) || null;
        try {
            await dispatcher.invokeHookAsync('didResolveOperation', requestContext);
        }
        catch (err) {
            if (err instanceof runHttpQuery_1.HttpQueryError) {
                const graphqlError = new graphql_1.GraphQLError(err.message);
                graphqlError.stack = err.stack;
                await didEncounterErrors([graphqlError]);
                throw err;
            }
            return await sendErrorResponse(err);
        }
        if (metrics.persistedQueryRegister && persistedQueryCache) {
            Promise.resolve(persistedQueryCache.set(queryHash, query, config.persistedQueries &&
                typeof config.persistedQueries.ttl !== 'undefined'
                ? {
                    ttl: config.persistedQueries.ttl,
                }
                : Object.create(null))).catch(logger.warn);
        }
        let response = await dispatcher.invokeHooksUntilNonNull('responseForOperation', requestContext);
        if (response == null) {
            const executionListeners = [];
            dispatcher.invokeHookSync('executionDidStart', requestContext).forEach(executionListener => {
                if (typeof executionListener === 'function') {
                    executionListeners.push({
                        executionDidEnd: executionListener,
                    });
                }
                else if (typeof executionListener === 'object') {
                    executionListeners.push(executionListener);
                }
            });
            const executionDispatcher = new dispatcher_1.Dispatcher(executionListeners);
            const invokeWillResolveField = (...args) => executionDispatcher.invokeDidStartHook('willResolveField', ...args);
            Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });
            if (config.fieldResolver) {
                Object.defineProperty(requestContext.context, schemaInstrumentation_1.symbolUserFieldResolver, { value: config.fieldResolver });
            }
            schemaInstrumentation_1.enablePluginsForSchemaResolvers(config.schema);
            try {
                const result = await execute(requestContext);
                if (result.errors) {
                    await didEncounterErrors(result.errors);
                }
                response = {
                    ...result,
                    errors: result.errors ? formatErrors(result.errors) : undefined,
                };
                executionDispatcher.reverseInvokeHookSync("executionDidEnd");
            }
            catch (executionError) {
                executionDispatcher.reverseInvokeHookSync("executionDidEnd", executionError);
                return await sendErrorResponse(executionError);
            }
        }
        if (config.formatResponse) {
            const formattedResponse = config.formatResponse(response, requestContext);
            if (formattedResponse != null) {
                response = formattedResponse;
            }
        }
        return sendResponse(response);
    }
    finally {
    }
    function parse(query, parseOptions) {
        return graphql_1.parse(query, parseOptions);
    }
    function validate(document) {
        let rules = graphql_1.specifiedRules;
        if (config.validationRules) {
            rules = rules.concat(config.validationRules);
        }
        return graphql_1.validate(config.schema, document, rules);
    }
    async function execute(requestContext) {
        const { request, document } = requestContext;
        const executionArgs = {
            schema: config.schema,
            document,
            rootValue: typeof config.rootValue === 'function'
                ? config.rootValue(document)
                : config.rootValue,
            contextValue: requestContext.context,
            variableValues: request.variables,
            operationName: request.operationName,
            fieldResolver: config.fieldResolver,
        };
        if (config.executor) {
            return await config.executor(requestContext);
        }
        else {
            return await graphql_1.execute(executionArgs);
        }
    }
    async function sendResponse(response) {
        requestContext.response = {
            ...requestContext.response,
            errors: response.errors,
            data: response.data,
            extensions: response.extensions,
        };
        await dispatcher.invokeHookAsync('willSendResponse', requestContext);
        return requestContext.response;
    }
    async function emitErrorAndThrow(error) {
        await didEncounterErrors([error]);
        throw error;
    }
    async function didEncounterErrors(errors) {
        requestContext.errors = errors;
        return await dispatcher.invokeHookAsync('didEncounterErrors', requestContext);
    }
    async function sendErrorResponse(errorOrErrors, errorClass) {
        const errors = Array.isArray(errorOrErrors)
            ? errorOrErrors
            : [errorOrErrors];
        await didEncounterErrors(errors);
        return sendResponse({
            errors: formatErrors(errors.map(err => apollo_server_errors_1.fromGraphQLError(err, errorClass && {
                errorClass,
            }))),
        });
    }
    function formatErrors(errors) {
        return apollo_server_errors_1.formatApolloErrors(errors, {
            formatter: config.formatError,
            debug: requestContext.debug,
        });
    }
    function initializeRequestListenerDispatcher() {
        const requestListeners = [];
        if (config.plugins) {
            for (const plugin of config.plugins) {
                if (!plugin.requestDidStart)
                    continue;
                const listener = plugin.requestDidStart(requestContext);
                if (listener) {
                    requestListeners.push(listener);
                }
            }
        }
        return new dispatcher_1.Dispatcher(requestListeners);
    }
    async function initializeDataSources() {
        if (config.dataSources) {
            const context = requestContext.context;
            const dataSources = config.dataSources();
            const initializers = [];
            for (const dataSource of Object.values(dataSources)) {
                if (dataSource.initialize) {
                    initializers.push(dataSource.initialize({
                        context,
                        cache: requestContext.cache,
                    }));
                }
            }
            await Promise.all(initializers);
            if ('dataSources' in context) {
                throw new Error('Please use the dataSources config option instead of putting dataSources on the context yourself.');
            }
            context.dataSources = dataSources;
        }
    }
}
exports.processGraphQLRequest = processGraphQLRequest;
//# sourceMappingURL=requestPipeline.js.map