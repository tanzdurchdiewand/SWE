"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApolloServer = void 0;
const express_1 = __importDefault(require("express"));
const http_1 = __importDefault(require("http"));
const apollo_server_express_1 = require("apollo-server-express");
__exportStar(require("./exports"), exports);
class ApolloServer extends apollo_server_express_1.ApolloServer {
    constructor(config) {
        super(config);
        this.cors = config && config.cors;
        this.onHealthCheck = config && config.onHealthCheck;
    }
    createServerInfo(server) {
        const serverInfo = {
            ...server.address(),
            server,
        };
        let hostForUrl = serverInfo.address;
        if (serverInfo.address === '' || serverInfo.address === '::')
            hostForUrl = 'localhost';
        serverInfo.url = require('url').format({
            protocol: 'http',
            hostname: hostForUrl,
            port: serverInfo.port,
            pathname: this.graphqlPath,
        });
        return serverInfo;
    }
    applyMiddleware() {
        throw new Error('To use Apollo Server with an existing express application, please use apollo-server-express');
    }
    async listen(...opts) {
        const app = express_1.default();
        app.disable('x-powered-by');
        super.applyMiddleware({
            app,
            path: '/',
            bodyParserConfig: { limit: '50mb' },
            onHealthCheck: this.onHealthCheck,
            cors: typeof this.cors !== 'undefined'
                ? this.cors
                : {
                    origin: '*',
                },
        });
        const httpServer = http_1.default.createServer(app);
        this.httpServer = httpServer;
        await new Promise(resolve => {
            httpServer.once('listening', resolve);
            httpServer.listen(...(opts.length ? opts : [{ port: 4000 }]));
        });
        return this.createServerInfo(httpServer);
    }
    async stop() {
        if (this.httpServer) {
            const httpServer = this.httpServer;
            await new Promise(resolve => httpServer.close(resolve));
            this.httpServer = undefined;
        }
        await super.stop();
    }
}
exports.ApolloServer = ApolloServer;
//# sourceMappingURL=index.js.map